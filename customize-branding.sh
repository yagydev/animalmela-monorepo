#!/bin/bash

# Animall Platform Branding Customization Script
# This script helps you customize your platform's branding, colors, and content

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_info() {
    echo -e "${CYAN}ℹ️  $1${NC}"
}

# Function to prompt for input with default value
prompt_input() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"
    
    read -p "$prompt [$default]: " input
    
    if [ -z "$input" ]; then
        input="$default"
    fi
    
    eval "$var_name='$input'"
}

print_header "🎨 ANIMALL BRANDING CUSTOMIZATION"

echo "This script will help you customize your platform's branding."
echo "You can update:"
echo "• Company name and tagline"
echo "• Colors and theme"
echo "• Contact information"
echo "• Social media links"
echo "• Platform statistics"
echo ""

read -p "Do you want to continue? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Customization cancelled."
    exit 1
fi

print_header "1. COMPANY INFORMATION"

prompt_input "Company name" "Animall" COMPANY_NAME
prompt_input "Company tagline" "Your Pet's Best Friend" COMPANY_TAGLINE
prompt_input "Company description" "Comprehensive pet services platform" COMPANY_DESCRIPTION

print_header "2. CONTACT INFORMATION"

prompt_input "Contact email" "hello@animall.com" CONTACT_EMAIL
prompt_input "Phone number" "+1 (555) 123-4567" CONTACT_PHONE
prompt_input "Business address" "123 Pet Street, Pet City, PC 12345" CONTACT_ADDRESS
prompt_input "Website URL" "https://animall.com" WEBSITE_URL

print_header "3. SOCIAL MEDIA LINKS"

prompt_input "Facebook URL" "https://facebook.com/animall" FACEBOOK_URL
prompt_input "Twitter URL" "https://twitter.com/animall" TWITTER_URL
prompt_input "Instagram URL" "https://instagram.com/animall" INSTAGRAM_URL
prompt_input "LinkedIn URL" "https://linkedin.com/company/animall" LINKEDIN_URL

print_header "4. PLATFORM STATISTICS"

prompt_input "Happy pets count" "10,000+" HAPPY_PETS
prompt_input "Trusted sitters count" "5,000+" TRUSTED_SITTERS
prompt_input "Services completed" "50,000+" SERVICES_COMPLETED
prompt_input "Average rating" "4.9/5" AVERAGE_RATING

print_header "5. COLOR SCHEME"

echo "Choose a color scheme:"
echo "1. Blue & Purple (Current)"
echo "2. Green & Blue (Nature)"
echo "3. Orange & Red (Warm)"
echo "4. Purple & Pink (Modern)"
echo "5. Custom colors"
echo ""

read -p "Choose color scheme (1-5): " color_choice

case $color_choice in
    1)
        PRIMARY_COLOR="#3b82f6"
        SECONDARY_COLOR="#d946ef"
        COLOR_NAME="Blue & Purple"
        ;;
    2)
        PRIMARY_COLOR="#22c55e"
        SECONDARY_COLOR="#3b82f6"
        COLOR_NAME="Green & Blue"
        ;;
    3)
        PRIMARY_COLOR="#f59e0b"
        SECONDARY_COLOR="#ef4444"
        COLOR_NAME="Orange & Red"
        ;;
    4)
        PRIMARY_COLOR="#8b5cf6"
        SECONDARY_COLOR="#ec4899"
        COLOR_NAME="Purple & Pink"
        ;;
    5)
        prompt_input "Primary color (hex)" "#3b82f6" PRIMARY_COLOR
        prompt_input "Secondary color (hex)" "#d946ef" SECONDARY_COLOR
        COLOR_NAME="Custom"
        ;;
    *)
        PRIMARY_COLOR="#3b82f6"
        SECONDARY_COLOR="#d946ef"
        COLOR_NAME="Blue & Purple (Default)"
        ;;
esac

print_header "6. APPLYING CUSTOMIZATIONS"

print_info "Updating branding configuration..."

# Create shared directory if it doesn't exist
mkdir -p shared/constants

# Update the branding configuration file
cat > shared/constants/branding.ts << EOF
// Animall Platform Branding Configuration
// Generated by customize-branding.sh on $(date)

export const BRAND_CONFIG = {
  // Company Information
  name: '$COMPANY_NAME',
  fullName: '$COMPANY_NAME - $COMPANY_TAGLINE',
  tagline: '$COMPANY_TAGLINE',
  description: '$COMPANY_DESCRIPTION',
  
  // Contact Information
  contact: {
    email: '$CONTACT_EMAIL',
    phone: '$CONTACT_PHONE',
    address: '$CONTACT_ADDRESS',
    website: '$WEBSITE_URL',
  },
  
  // Social Media Links
  social: {
    facebook: '$FACEBOOK_URL',
    twitter: '$TWITTER_URL',
    instagram: '$INSTAGRAM_URL',
    linkedin: '$LINKEDIN_URL',
  },
  
  // Color Palette
  colors: {
    primary: {
      50: '#eff6ff',
      100: '#dbeafe',
      200: '#bfdbfe',
      300: '#93c5fd',
      400: '#60a5fa',
      500: '$PRIMARY_COLOR',
      600: '$PRIMARY_COLOR',
      700: '#1d4ed8',
      800: '#1e40af',
      900: '#1e3a8a',
    },
    secondary: {
      50: '#fdf4ff',
      100: '#fae8ff',
      200: '#f5d0fe',
      300: '#f0abfc',
      400: '#e879f9',
      500: '$SECONDARY_COLOR',
      600: '$SECONDARY_COLOR',
      700: '#a21caf',
      800: '#86198f',
      900: '#701a75',
    },
    success: '#22c55e',
    warning: '#f59e0b',
    error: '#ef4444',
    info: '$PRIMARY_COLOR',
  },
  
  // Platform Statistics
  stats: {
    happyPets: '$HAPPY_PETS',
    trustedSitters: '$TRUSTED_SITTERS',
    servicesCompleted: '$SERVICES_COMPLETED',
    averageRating: '$AVERAGE_RATING',
  },
  
  // SEO and Marketing
  seo: {
    keywords: 'pet services, pet sitting, dog walking, pet grooming, pet training, veterinary care',
    author: '$COMPANY_NAME Team',
  },
};

export default BRAND_CONFIG;
EOF

print_success "Branding configuration updated"

print_info "Updating Tailwind CSS configuration..."

# Update Tailwind config with new colors if web-frontend exists
if [ -d "web-frontend" ]; then
cat > web-frontend/tailwind.config.js << EOF
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '$PRIMARY_COLOR',
          600: '$PRIMARY_COLOR',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
        },
        secondary: {
          50: '#fdf4ff',
          100: '#fae8ff',
          200: '#f5d0fe',
          300: '#f0abfc',
          400: '#e879f9',
          500: '$SECONDARY_COLOR',
          600: '$SECONDARY_COLOR',
          700: '#a21caf',
          800: '#86198f',
          900: '#701a75',
        },
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
    require('@tailwindcss/aspect-ratio'),
  ],
}
EOF
print_success "Tailwind CSS configuration updated"
fi

print_info "Updating mobile app configuration..."

# Update mobile app configuration if it exists
if [ -f "mobile/app.json" ]; then
    # Create a backup
    cp mobile/app.json mobile/app.json.backup
    
    # Update app.json with new branding
    node -e "
        const fs = require('fs');
        const appJson = JSON.parse(fs.readFileSync('mobile/app.json', 'utf8'));
        appJson.expo.name = '$COMPANY_NAME';
        appJson.expo.description = '$COMPANY_DESCRIPTION';
        fs.writeFileSync('mobile/app.json', JSON.stringify(appJson, null, 2));
    " 2>/dev/null || print_warning "Could not update mobile app.json automatically"
    
    print_success "Mobile app configuration updated"
fi

print_info "Updating package.json files..."

# Update root package.json
if [ -f "package.json" ]; then
    node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        pkg.description = '$COMPANY_DESCRIPTION';
        pkg.author = '$COMPANY_NAME Team';
        fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
    " 2>/dev/null || print_warning "Could not update root package.json"
fi

# Update backend package.json
if [ -f "backend/package.json" ]; then
    node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('backend/package.json', 'utf8'));
        pkg.description = '$COMPANY_NAME Backend API';
        pkg.author = '$COMPANY_NAME Team';
        fs.writeFileSync('backend/package.json', JSON.stringify(pkg, null, 2));
    " 2>/dev/null || print_warning "Could not update backend package.json"
fi

# Update web-frontend package.json
if [ -f "web-frontend/package.json" ]; then
    node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('web-frontend/package.json', 'utf8'));
        pkg.description = '$COMPANY_NAME Web Frontend';
        pkg.author = '$COMPANY_NAME Team';
        fs.writeFileSync('web-frontend/package.json', JSON.stringify(pkg, null, 2));
    " 2>/dev/null || print_warning "Could not update web-frontend package.json"
fi

print_success "Package.json files updated"

print_header "✅ CUSTOMIZATION COMPLETE"

echo ""
echo "🎉 Your platform has been customized with:"
echo "• Company: $COMPANY_NAME"
echo "• Tagline: $COMPANY_TAGLINE"
echo "• Colors: $COLOR_NAME"
echo "• Contact: $CONTACT_EMAIL"
echo "• Website: $WEBSITE_URL"
echo ""
echo "📋 Next Steps:"
echo "1. Restart your development servers to see changes"
echo "2. Update your logo and favicon files"
echo "3. Customize content in individual pages"
echo "4. Test the new branding across all platforms"
echo ""

print_success "Branding customization completed successfully!"

echo ""
echo "🔄 To see your changes:"
echo "• Web: Restart 'npm run dev:web' and visit http://localhost:3000"
echo "• Mobile: Restart the mobile app"
echo "• API: Restart 'npm run dev:backend'"
echo ""

read -p "Do you want to restart the development servers now? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_info "Restarting development servers..."
    
    # Kill existing processes
    pkill -f "npm run dev" || true
    
    # Wait a moment
    sleep 2
    
    # Restart servers
    if [ -f "backend/package.json" ]; then
        cd backend && npm run dev &
        cd ..
        sleep 3
    fi
    
    if [ -f "web-frontend/package.json" ]; then
        cd web-frontend && npm run dev &
        cd ..
    fi
    
    print_success "Development servers restarted!"
    echo "Visit http://localhost:3000 to see your customized platform"
fi
